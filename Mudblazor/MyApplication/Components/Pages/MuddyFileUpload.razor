@page "/fileupload"

<PageTitle>File Upload</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Upload A File</MudText>

<MudText Typo="Typo.body1" Class="mb-4">Current file: @FileName</MudText>

<MudFileUpload T="IBrowserFile" FilesChanged="FileUploaded">
    <ActivatorContent>
        <MudButton Class="mb-4" Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            Upload Files
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

<MudSimpleTable Class="mb-4" Style="overflow-x: auto;">
    <thead>
        <tr>
            <th>ReaderID</th>
            <th>Reader Name</th>
            <th>Reader Events</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var reader in eventDictionary)
        {
            <tr>
                <td>@reader.Key</td>
                <td>@reader.Value[0].GetEventDescription()</td>
                <td>@reader.Value.Count()</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

<MudSimpleTable Class="mb-4" Style="overflow-x: auto;">
    <thead>
        <tr>
            <th>Day of The Week</th>
            <th>Reader Name</th>
            <th>Reader Events</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var reader in eventDictionaryFilteredByTime)
        {
            <tr>
                <td>@reader.Key</td>
                <td>@reader.Value[0].GetEventDescription()</td>
                <td>@reader.Value.Count()</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

<!--
<div>
    @foreach(string key in eventDictionaryFilteredByTime.Keys)
    {

        <p>@key</p>
        <p>@eventDictionaryFilteredByTime[key].Count()</p>

    }
</div>
-->

<div>
    <MudText Typo="Typo.h5" Class="py-3">Activity by Day of the Week</MudText>
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" ChartOptions="@Options"></MudChart>
</div>

@code{

    public string FileName { get; set; } = "";
    public string ErrorMessage { get; set; } = "";


    // Dictionary of ReaderEvents that uses the Unique ID as a key
    public static Dictionary<string, List<ReaderEvent>> eventDictionary = new Dictionary<string, List<ReaderEvent>>();
    public static Dictionary<string, List<ReaderEvent>> eventDictionaryFilteredByTime = new Dictionary<string, List<ReaderEvent>>();


    // Chart Variables
    public ChartOptions Options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = Array.Empty<string>();

    /*
    public List<ReaderEvent> testEvents = new List<ReaderEvent>()
    {

        new ReaderEvent("Time", "Location", "Description", "HashID", "DevID", "Machine"),
        new ReaderEvent("is", "is", "is", "is", "is", "is"),
        new ReaderEvent("a", "a", "a", "a", "a", "a"),
        new ReaderEvent("test", "test", "test", "test", "test", "test"),
        new ReaderEvent("test", "test", "test", "test", "test", "test"),
        new ReaderEvent("test", "test", "test", "test", "test", "test"),
        

    };
    */


    public async Task FileUploaded(IBrowserFile e)
    {
        var browserFile = e;
        FileName = browserFile.Name;

        if (browserFile != null)
        {

            try
            {
                
                // Saving Uploaded file to disk
                var fileStream = browserFile.OpenReadStream(long.MaxValue);
                var destinationStream = new FileStream(FileName, FileMode.Create);
                await fileStream.CopyToAsync(destinationStream);
                destinationStream.Close();


                // Create a stream reader that reads from the stream when a file is uploaded & make an eventList to keep track
                var sr = new StreamReader(FileName);
                var eventList = new List<ReaderEvent>();

                // Check every line of the stream in StreamReader
                string? line = sr.ReadLine();
                while((line = sr.ReadLine()) != null) // Until there is no remaining lines left
                {   

                    // Break each line into an array with Reader Data
                    string[] data = line.Split(",");

                    // Create a new Reader Event using the string array of the current line
                    eventList.Add(new ReaderEvent(
                        data[0],
                        data[1],
                        data[2],
                        data[3],
                        data[4],
                        data[5]
                    ));

                }

                // Returns a dictionary with Readers and their Respective Events
                eventDictionary = OrganizeDictionData(eventList);
                eventDictionaryFilteredByTime = OrganizeDictionByDate(eventList);

                // Gets the data for creating the chart
                GetChartData();

                // Close the file stream of the uploaded file
                fileStream.Close();

                this.StateHasChanged();

            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }
    }
    public Dictionary<string, List<ReaderEvent>> OrganizeDictionData(List<ReaderEvent> rawData)
    {

        Dictionary<string, List<ReaderEvent>> resultDict = new Dictionary<string, List<ReaderEvent>>();

        // Goes through each recorded ReaderEvent in the raw Data list
        foreach(ReaderEvent rawReaderEvent in rawData)
        {

            // Get the reader's ID that captured the event and add or create a section in the dictionary accordingly
            var readerID = rawReaderEvent.GetEventUniqueID();
            if(!resultDict.ContainsKey(readerID))
            {

                resultDict[readerID] = new List<ReaderEvent>(); // Create a entry when unique readerID is found

            }
            resultDict[readerID].Add(rawReaderEvent); // Add an event to the respective reader

        }

        return resultDict;
        
    }

    public Dictionary<string, List<ReaderEvent>> OrganizeDictionByDate(List<ReaderEvent> masterList)
    {

        Dictionary<string, List<ReaderEvent>> resultDict = new Dictionary<string, List<ReaderEvent>>();

        // Goes through each recorded ReaderEvent in the raw Data list
        foreach(ReaderEvent rawReaderEvent in masterList)
        {

            // Get the reader's ID that captured the event and add or create a section in the dictionary accordingly
            string dayOfEvent = rawReaderEvent.GetEventTime().DayOfWeek.ToString();
            if(!resultDict.ContainsKey(dayOfEvent))
            {

                resultDict[dayOfEvent] = new List<ReaderEvent>(); // Create a entry when an event occured on a unique time is found

            }
            resultDict[dayOfEvent].Add(rawReaderEvent); // Add an event to the respective reader

        }

        return resultDict;

    }

    public void GetChartData()
    {

        // Set the labels of the chart using the keys of the dictionary
        XAxisLabels = eventDictionaryFilteredByTime.Keys.ToArray();

        // Pull the reader event data from the values in the dictionary and put them into a double[]
        List<ReaderEvent>[] pullArrayOfEvents = eventDictionaryFilteredByTime.Values.ToArray();
        List<double> listOfEventsForEachDayOfTheWeek = new List<double>();
        foreach(List<ReaderEvent> reList in pullArrayOfEvents)
        {

            listOfEventsForEachDayOfTheWeek.Add(reList.Count());

        }

        // Add a new chart series for the chart with the data obtained from above
        Series.Add(new ChartSeries { Name = "Number of Scans", Data = listOfEventsForEachDayOfTheWeek.ToArray() } );


    }

    public class ReaderEvent
    {

        // Data of a ReaderEvent
        private DateTime time;
        private string location;
        private string description;
        private string hashID;
        private string devID;
        private string machine;

        // Constructors
        public ReaderEvent()
        {

            time = DateTime.Now;
            location = "N/A";
            description = "N/A";
            hashID = "N/A";
            devID = "N/A";
            machine = "N/A";

        }
        public ReaderEvent(string eTime, string eLocation, string eDescription, string eHashID, string eDevID, string eMachine)
        {

            time = DateTime.Parse(eTime);
            location = eLocation;
            description = eDescription;
            hashID = eHashID;
            devID = eDevID;
            machine = eMachine;

        }

        public DateTime GetEventTime() => time;
        public string GetEventLocation() => location;
        public string GetEventDescription() => description;
        public string GetEventHashID() => hashID;
        public string GetEventDevID() => devID;
        public string GetEventMachine() => machine;

        public string GetEventUniqueID() => devID + machine;

    }

}
